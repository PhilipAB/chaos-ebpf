// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bwmanager

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bwmanagerIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

type bwmanagerStateTableKey struct {
	EtherType uint16
	Padding16 uint16
	IpSrc     struct {
		Ipv4 uint32
		_    [12]byte
	}
}

type bwmanagerStateTableLeaf struct {
	State     uint32
	Padding32 uint32
	R1        uint64
	R2        uint64
}

type bwmanagerXFSMTableKey struct {
	Cond1     uint8
	Padding1  uint8
	Padding2  uint16
	EtherType uint16
	Padding3  uint16
	State     uint32
}

type bwmanagerXFSMTableLeaf struct {
	NextState      uint32
	PacketAction   uint32
	UpdateFunction uint32
}

// loadBwmanager returns the embedded CollectionSpec for bwmanager.
func loadBwmanager() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BwmanagerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bwmanager: %w", err)
	}

	return spec, err
}

// loadBwmanagerObjects loads bwmanager and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bwmanagerObjects
//	*bwmanagerPrograms
//	*bwmanagerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBwmanagerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBwmanager()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bwmanagerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bwmanagerSpecs struct {
	bwmanagerProgramSpecs
	bwmanagerMapSpecs
}

// bwmanagerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bwmanagerProgramSpecs struct {
	TcLimitBandwidth *ebpf.ProgramSpec `ebpf:"tc_limit_bandwidth"`
}

// bwmanagerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bwmanagerMapSpecs struct {
	BytesPerSecond      *ebpf.MapSpec `ebpf:"bytes_per_second"`
	EnableIpv4          *ebpf.MapSpec `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.MapSpec `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.MapSpec `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.MapSpec `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.MapSpec `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.MapSpec `ebpf:"ipv6_range_exempt_list"`
	NextProgrFd         *ebpf.MapSpec `ebpf:"next_progr_fd"`
	PortMap             *ebpf.MapSpec `ebpf:"port_map"`
	StateTable          *ebpf.MapSpec `ebpf:"state_table"`
	SupportedProtocols  *ebpf.MapSpec `ebpf:"supported_protocols"`
	XfsmTable           *ebpf.MapSpec `ebpf:"xfsm_table"`
}

// bwmanagerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBwmanagerObjects or ebpf.CollectionSpec.LoadAndAssign.
type bwmanagerObjects struct {
	bwmanagerPrograms
	bwmanagerMaps
}

func (o *bwmanagerObjects) Close() error {
	return _BwmanagerClose(
		&o.bwmanagerPrograms,
		&o.bwmanagerMaps,
	)
}

// bwmanagerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBwmanagerObjects or ebpf.CollectionSpec.LoadAndAssign.
type bwmanagerMaps struct {
	BytesPerSecond      *ebpf.Map `ebpf:"bytes_per_second"`
	EnableIpv4          *ebpf.Map `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.Map `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.Map `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.Map `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.Map `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.Map `ebpf:"ipv6_range_exempt_list"`
	NextProgrFd         *ebpf.Map `ebpf:"next_progr_fd"`
	PortMap             *ebpf.Map `ebpf:"port_map"`
	StateTable          *ebpf.Map `ebpf:"state_table"`
	SupportedProtocols  *ebpf.Map `ebpf:"supported_protocols"`
	XfsmTable           *ebpf.Map `ebpf:"xfsm_table"`
}

func (m *bwmanagerMaps) Close() error {
	return _BwmanagerClose(
		m.BytesPerSecond,
		m.EnableIpv4,
		m.EnableIpv6,
		m.Ipv4Mask,
		m.Ipv4RangeExemptList,
		m.Ipv6Mask,
		m.Ipv6RangeExemptList,
		m.NextProgrFd,
		m.PortMap,
		m.StateTable,
		m.SupportedProtocols,
		m.XfsmTable,
	)
}

// bwmanagerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBwmanagerObjects or ebpf.CollectionSpec.LoadAndAssign.
type bwmanagerPrograms struct {
	TcLimitBandwidth *ebpf.Program `ebpf:"tc_limit_bandwidth"`
}

func (p *bwmanagerPrograms) Close() error {
	return _BwmanagerClose(
		p.TcLimitBandwidth,
	)
}

func _BwmanagerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bwmanager_bpfel.o
var _BwmanagerBytes []byte
