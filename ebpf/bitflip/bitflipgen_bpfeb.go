// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package bitflip

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bitflipGenIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

// loadBitflipGen returns the embedded CollectionSpec for bitflipGen.
func loadBitflipGen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BitflipGenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bitflipGen: %w", err)
	}

	return spec, err
}

// loadBitflipGenObjects loads bitflipGen and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bitflipGenObjects
//	*bitflipGenPrograms
//	*bitflipGenMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBitflipGenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBitflipGen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bitflipGenSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bitflipGenSpecs struct {
	bitflipGenProgramSpecs
	bitflipGenMapSpecs
}

// bitflipGenSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bitflipGenProgramSpecs struct {
	Bitflip *ebpf.ProgramSpec `ebpf:"bitflip"`
}

// bitflipGenMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bitflipGenMapSpecs struct {
	BitflipProbability  *ebpf.MapSpec `ebpf:"bitflip_probability"`
	EnableIpv4          *ebpf.MapSpec `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.MapSpec `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.MapSpec `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.MapSpec `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.MapSpec `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.MapSpec `ebpf:"ipv6_range_exempt_list"`
	PortMap             *ebpf.MapSpec `ebpf:"port_map"`
	RecalculateChecksum *ebpf.MapSpec `ebpf:"recalculate_checksum"`
	SupportedProtocols  *ebpf.MapSpec `ebpf:"supported_protocols"`
}

// bitflipGenObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBitflipGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type bitflipGenObjects struct {
	bitflipGenPrograms
	bitflipGenMaps
}

func (o *bitflipGenObjects) Close() error {
	return _BitflipGenClose(
		&o.bitflipGenPrograms,
		&o.bitflipGenMaps,
	)
}

// bitflipGenMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBitflipGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type bitflipGenMaps struct {
	BitflipProbability  *ebpf.Map `ebpf:"bitflip_probability"`
	EnableIpv4          *ebpf.Map `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.Map `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.Map `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.Map `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.Map `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.Map `ebpf:"ipv6_range_exempt_list"`
	PortMap             *ebpf.Map `ebpf:"port_map"`
	RecalculateChecksum *ebpf.Map `ebpf:"recalculate_checksum"`
	SupportedProtocols  *ebpf.Map `ebpf:"supported_protocols"`
}

func (m *bitflipGenMaps) Close() error {
	return _BitflipGenClose(
		m.BitflipProbability,
		m.EnableIpv4,
		m.EnableIpv6,
		m.Ipv4Mask,
		m.Ipv4RangeExemptList,
		m.Ipv6Mask,
		m.Ipv6RangeExemptList,
		m.PortMap,
		m.RecalculateChecksum,
		m.SupportedProtocols,
	)
}

// bitflipGenPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBitflipGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type bitflipGenPrograms struct {
	Bitflip *ebpf.Program `ebpf:"bitflip"`
}

func (p *bitflipGenPrograms) Close() error {
	return _BitflipGenClose(
		p.Bitflip,
	)
}

func _BitflipGenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bitflipgen_bpfeb.o
var _BitflipGenBytes []byte
