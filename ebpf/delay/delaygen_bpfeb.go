// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package delay

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type delayGenIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

// loadDelayGen returns the embedded CollectionSpec for delayGen.
func loadDelayGen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DelayGenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load delayGen: %w", err)
	}

	return spec, err
}

// loadDelayGenObjects loads delayGen and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*delayGenObjects
//	*delayGenPrograms
//	*delayGenMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDelayGenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDelayGen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// delayGenSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type delayGenSpecs struct {
	delayGenProgramSpecs
	delayGenMapSpecs
}

// delayGenSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type delayGenProgramSpecs struct {
	EgressDelay *ebpf.ProgramSpec `ebpf:"egress_delay"`
}

// delayGenMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type delayGenMapSpecs struct {
	DelayMap            *ebpf.MapSpec `ebpf:"delay_map"`
	DropHorizonMap      *ebpf.MapSpec `ebpf:"drop_horizon_map"`
	EnableIpv4          *ebpf.MapSpec `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.MapSpec `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.MapSpec `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.MapSpec `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.MapSpec `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.MapSpec `ebpf:"ipv6_range_exempt_list"`
	JitterMap           *ebpf.MapSpec `ebpf:"jitter_map"`
	PortMap             *ebpf.MapSpec `ebpf:"port_map"`
	SupportedProtocols  *ebpf.MapSpec `ebpf:"supported_protocols"`
}

// delayGenObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDelayGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type delayGenObjects struct {
	delayGenPrograms
	delayGenMaps
}

func (o *delayGenObjects) Close() error {
	return _DelayGenClose(
		&o.delayGenPrograms,
		&o.delayGenMaps,
	)
}

// delayGenMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDelayGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type delayGenMaps struct {
	DelayMap            *ebpf.Map `ebpf:"delay_map"`
	DropHorizonMap      *ebpf.Map `ebpf:"drop_horizon_map"`
	EnableIpv4          *ebpf.Map `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.Map `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.Map `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.Map `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.Map `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.Map `ebpf:"ipv6_range_exempt_list"`
	JitterMap           *ebpf.Map `ebpf:"jitter_map"`
	PortMap             *ebpf.Map `ebpf:"port_map"`
	SupportedProtocols  *ebpf.Map `ebpf:"supported_protocols"`
}

func (m *delayGenMaps) Close() error {
	return _DelayGenClose(
		m.DelayMap,
		m.DropHorizonMap,
		m.EnableIpv4,
		m.EnableIpv6,
		m.Ipv4Mask,
		m.Ipv4RangeExemptList,
		m.Ipv6Mask,
		m.Ipv6RangeExemptList,
		m.JitterMap,
		m.PortMap,
		m.SupportedProtocols,
	)
}

// delayGenPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDelayGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type delayGenPrograms struct {
	EgressDelay *ebpf.Program `ebpf:"egress_delay"`
}

func (p *delayGenPrograms) Close() error {
	return _DelayGenClose(
		p.EgressDelay,
	)
}

func _DelayGenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed delaygen_bpfeb.o
var _DelayGenBytes []byte
