// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package duplication

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type duplicateGenIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

// loadDuplicateGen returns the embedded CollectionSpec for duplicateGen.
func loadDuplicateGen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DuplicateGenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load duplicateGen: %w", err)
	}

	return spec, err
}

// loadDuplicateGenObjects loads duplicateGen and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*duplicateGenObjects
//	*duplicateGenPrograms
//	*duplicateGenMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDuplicateGenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDuplicateGen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// duplicateGenSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type duplicateGenSpecs struct {
	duplicateGenProgramSpecs
	duplicateGenMapSpecs
}

// duplicateGenSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type duplicateGenProgramSpecs struct {
	DuplicatePkt *ebpf.ProgramSpec `ebpf:"duplicate_pkt"`
}

// duplicateGenMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type duplicateGenMapSpecs struct {
	DuplicationRateMap  *ebpf.MapSpec `ebpf:"duplication_rate_map"`
	EnableIpv4          *ebpf.MapSpec `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.MapSpec `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.MapSpec `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.MapSpec `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.MapSpec `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.MapSpec `ebpf:"ipv6_range_exempt_list"`
	PortMap             *ebpf.MapSpec `ebpf:"port_map"`
	SupportedProtocols  *ebpf.MapSpec `ebpf:"supported_protocols"`
	TrafficDirection    *ebpf.MapSpec `ebpf:"traffic_direction"`
}

// duplicateGenObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDuplicateGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type duplicateGenObjects struct {
	duplicateGenPrograms
	duplicateGenMaps
}

func (o *duplicateGenObjects) Close() error {
	return _DuplicateGenClose(
		&o.duplicateGenPrograms,
		&o.duplicateGenMaps,
	)
}

// duplicateGenMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDuplicateGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type duplicateGenMaps struct {
	DuplicationRateMap  *ebpf.Map `ebpf:"duplication_rate_map"`
	EnableIpv4          *ebpf.Map `ebpf:"enable_ipv4"`
	EnableIpv6          *ebpf.Map `ebpf:"enable_ipv6"`
	Ipv4Mask            *ebpf.Map `ebpf:"ipv4_mask"`
	Ipv4RangeExemptList *ebpf.Map `ebpf:"ipv4_range_exempt_list"`
	Ipv6Mask            *ebpf.Map `ebpf:"ipv6_mask"`
	Ipv6RangeExemptList *ebpf.Map `ebpf:"ipv6_range_exempt_list"`
	PortMap             *ebpf.Map `ebpf:"port_map"`
	SupportedProtocols  *ebpf.Map `ebpf:"supported_protocols"`
	TrafficDirection    *ebpf.Map `ebpf:"traffic_direction"`
}

func (m *duplicateGenMaps) Close() error {
	return _DuplicateGenClose(
		m.DuplicationRateMap,
		m.EnableIpv4,
		m.EnableIpv6,
		m.Ipv4Mask,
		m.Ipv4RangeExemptList,
		m.Ipv6Mask,
		m.Ipv6RangeExemptList,
		m.PortMap,
		m.SupportedProtocols,
		m.TrafficDirection,
	)
}

// duplicateGenPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDuplicateGenObjects or ebpf.CollectionSpec.LoadAndAssign.
type duplicateGenPrograms struct {
	DuplicatePkt *ebpf.Program `ebpf:"duplicate_pkt"`
}

func (p *duplicateGenPrograms) Close() error {
	return _DuplicateGenClose(
		p.DuplicatePkt,
	)
}

func _DuplicateGenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed duplicategen_bpfel.o
var _DuplicateGenBytes []byte
