// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: networkfilter.proto

package networkfilter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// @enable: true to enable, false to disable
type TickerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable    bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Filter    string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *TickerRequest) Reset() {
	*x = TickerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerRequest) ProtoMessage() {}

func (x *TickerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerRequest.ProtoReflect.Descriptor instead.
func (*TickerRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{0}
}

func (x *TickerRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TickerRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *TickerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Every chaos engineering RPC request should have the option to restrict it to certain network interfaces, ports etc. ...
// @namespace: "HOST", "CONTAINER" or a specific network namespace name --- default: "HOST"
// @interface: "ALL", "DOCKER", "CNI", "ETH", "LO" --- required --- the specified network interface(s)
// @enable_ipv4: Specify if the ebpf program should be applied to IPv4 traffic
// @enable_ipv6: Specify if the ebpf program should be applied to IPv6 traffic
// @ipv4_range: Specify an IPv4 range that should be exempted from the ebpf program, e.g. "10.42.0.0"
// @ipv4_mask: An IPv4 mask to compare x number of significant bits, e. g. 255.255.0.0 would compare against the first 16 bits
// @ipv6_range: an IPv6 ip address space that the @ip value should be compared against, e. g. "2001:cafe:42:0::"
// @ipv6_mask: An IPv6 mask to compare x number of significant bits, e. g. "FFFF:FFFF:FFFF:0::" would compare against the first 16 bits
// @enable_icmp: Specify if the ebpf program should be applied to ICMP traffic
// @enable_tcp: Specify if the ebpf program should be applied to TCP traffic
// @enable_udp: Specify if the ebpf program should be applied to UDP traffic
// @ports: Specify a list of ports the ebpf program should be applied to - by default it processes all ports
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Interface  string   `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	EnableIpv4 bool     `protobuf:"varint,3,opt,name=enable_ipv4,json=enableIpv4,proto3" json:"enable_ipv4,omitempty"`
	EnableIpv6 bool     `protobuf:"varint,4,opt,name=enable_ipv6,json=enableIpv6,proto3" json:"enable_ipv6,omitempty"`
	Ipv4Range  []string `protobuf:"bytes,5,rep,name=ipv4_range,json=ipv4Range,proto3" json:"ipv4_range,omitempty"`
	Ipv4Mask   string   `protobuf:"bytes,6,opt,name=ipv4_mask,json=ipv4Mask,proto3" json:"ipv4_mask,omitempty"`
	Ipv6Range  []string `protobuf:"bytes,7,rep,name=ipv6_range,json=ipv6Range,proto3" json:"ipv6_range,omitempty"`
	Ipv6Mask   string   `protobuf:"bytes,8,opt,name=ipv6_mask,json=ipv6Mask,proto3" json:"ipv6_mask,omitempty"`
	EnableIcmp bool     `protobuf:"varint,9,opt,name=enable_icmp,json=enableIcmp,proto3" json:"enable_icmp,omitempty"`
	EnableTcp  bool     `protobuf:"varint,10,opt,name=enable_tcp,json=enableTcp,proto3" json:"enable_tcp,omitempty"`
	EnableUdp  bool     `protobuf:"varint,11,opt,name=enable_udp,json=enableUdp,proto3" json:"enable_udp,omitempty"`
	Ports      []uint32 `protobuf:"varint,12,rep,packed,name=ports,proto3" json:"ports,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Filter) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *Filter) GetEnableIpv4() bool {
	if x != nil {
		return x.EnableIpv4
	}
	return false
}

func (x *Filter) GetEnableIpv6() bool {
	if x != nil {
		return x.EnableIpv6
	}
	return false
}

func (x *Filter) GetIpv4Range() []string {
	if x != nil {
		return x.Ipv4Range
	}
	return nil
}

func (x *Filter) GetIpv4Mask() string {
	if x != nil {
		return x.Ipv4Mask
	}
	return ""
}

func (x *Filter) GetIpv6Range() []string {
	if x != nil {
		return x.Ipv6Range
	}
	return nil
}

func (x *Filter) GetIpv6Mask() string {
	if x != nil {
		return x.Ipv6Mask
	}
	return ""
}

func (x *Filter) GetEnableIcmp() bool {
	if x != nil {
		return x.EnableIcmp
	}
	return false
}

func (x *Filter) GetEnableTcp() bool {
	if x != nil {
		return x.EnableTcp
	}
	return false
}

func (x *Filter) GetEnableUdp() bool {
	if x != nil {
		return x.EnableUdp
	}
	return false
}

func (x *Filter) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

// Request to traffic shaper
// @filter: Refer to the filter documentation above
// @drop_rate: Packet drop rate in of packet shaper in %
type EnableTrafficShaperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter   *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	DropRate *uint32 `protobuf:"varint,2,opt,name=drop_rate,json=dropRate,proto3,oneof" json:"drop_rate,omitempty"`
}

func (x *EnableTrafficShaperRequest) Reset() {
	*x = EnableTrafficShaperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTrafficShaperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTrafficShaperRequest) ProtoMessage() {}

func (x *EnableTrafficShaperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTrafficShaperRequest.ProtoReflect.Descriptor instead.
func (*EnableTrafficShaperRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{2}
}

func (x *EnableTrafficShaperRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EnableTrafficShaperRequest) GetDropRate() uint32 {
	if x != nil && x.DropRate != nil {
		return *x.DropRate
	}
	return 0
}

// To disable xdp ebpf programs or programs with only 1 valid traffic direction,
// it is sufficient to specify the namespace and network interface
// @namespace: "HOST", "CONTAINER" or a specific network namespace name --- default: "HOST"
// @interface: "ALL", "DOCKER", "CNI", "ETH", "LO" --- required --- the specified network interface(s)
type DisableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *DisableRequest) Reset() {
	*x = DisableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRequest) ProtoMessage() {}

func (x *DisableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRequest.ProtoReflect.Descriptor instead.
func (*DisableRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{3}
}

func (x *DisableRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DisableRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

// To disable tc ebpf programs with traffic direction,
// it is additionally necessary to provide if it is detached from ingress or egress
// @namespace: "HOST", "CONTAINER" or a specific network namespace name --- default: "HOST"
// @interface: "ALL", "DOCKER", "CNI", "ETH", "LO" --- required --- the specified network interface(s)
// @ingr_egr_control: TRUE means this process is detached from egress traffic, false from ingress traffic
type DisableTcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace        string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Interface        string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	TrafficDirection bool   `protobuf:"varint,3,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty"`
}

func (x *DisableTcRequest) Reset() {
	*x = DisableTcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTcRequest) ProtoMessage() {}

func (x *DisableTcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTcRequest.ProtoReflect.Descriptor instead.
func (*DisableTcRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{4}
}

func (x *DisableTcRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DisableTcRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *DisableTcRequest) GetTrafficDirection() bool {
	if x != nil {
		return x.TrafficDirection
	}
	return false
}

// Request to Bandwidth manager
// @filter: Refer to the filter documentation above
// @bandwidth: The bandwidth in bytes per second
// @traffic_direction: TRUE means this process is applied to egress traffic, false to ingress traffic
type BWRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter           *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Bandwidth        *uint64 `protobuf:"varint,2,opt,name=bandwidth,proto3,oneof" json:"bandwidth,omitempty"`
	TrafficDirection bool    `protobuf:"varint,3,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty"`
}

func (x *BWRequest) Reset() {
	*x = BWRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BWRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BWRequest) ProtoMessage() {}

func (x *BWRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BWRequest.ProtoReflect.Descriptor instead.
func (*BWRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{5}
}

func (x *BWRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *BWRequest) GetBandwidth() uint64 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *BWRequest) GetTrafficDirection() bool {
	if x != nil {
		return x.TrafficDirection
	}
	return false
}

// Request to Duplication Generator
// @filter: Refer to the filter documentation above
// @duplication_rate: rate in % that packets are randomly duplicated (default 5%)
// @traffic_direction: TRUE means this process is applied to egress traffic, false to ingress traffic
type DuplRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter           *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	DuplicationRate  *uint32 `protobuf:"varint,2,opt,name=duplication_rate,json=duplicationRate,proto3,oneof" json:"duplication_rate,omitempty"`
	TrafficDirection bool    `protobuf:"varint,3,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty"`
}

func (x *DuplRequest) Reset() {
	*x = DuplRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplRequest) ProtoMessage() {}

func (x *DuplRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplRequest.ProtoReflect.Descriptor instead.
func (*DuplRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{6}
}

func (x *DuplRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DuplRequest) GetDuplicationRate() uint32 {
	if x != nil && x.DuplicationRate != nil {
		return *x.DuplicationRate
	}
	return 0
}

func (x *DuplRequest) GetTrafficDirection() bool {
	if x != nil {
		return x.TrafficDirection
	}
	return false
}

// Request to Duplication Generator
// @filter: Refer to the filter documentation above
// @delay: artificial delay in ms --- default 500ms
// @jitter: artificial jitter in ms --- default 0
// @drop_horizon: if packet is delayed by more than drop_horizon, it is automatically dropped,
// it can only be provided if jitter != 0 and drop_horizon < delay + jitter --- default: 0
// @traffic_direction: TRUE means this process is applied to egress traffic, false to ingress traffic
type DelayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter      *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Delay       *uint32 `protobuf:"varint,2,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
	Jitter      *uint32 `protobuf:"varint,3,opt,name=jitter,proto3,oneof" json:"jitter,omitempty"`
	DropHorizon *uint32 `protobuf:"varint,4,opt,name=drop_horizon,json=dropHorizon,proto3,oneof" json:"drop_horizon,omitempty"`
}

func (x *DelayRequest) Reset() {
	*x = DelayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayRequest) ProtoMessage() {}

func (x *DelayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayRequest.ProtoReflect.Descriptor instead.
func (*DelayRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{7}
}

func (x *DelayRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DelayRequest) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *DelayRequest) GetJitter() uint32 {
	if x != nil && x.Jitter != nil {
		return *x.Jitter
	}
	return 0
}

func (x *DelayRequest) GetDropHorizon() uint32 {
	if x != nil && x.DropHorizon != nil {
		return *x.DropHorizon
	}
	return 0
}

// Request to Duplication Generator
// @filter: Refer to the filter documentation above
// @bitflip_probability: probability in % that bitflip occurs (default 5%)
// @recalc_checksum: enable/disable checksum recalculation
// @traffic_direction: TRUE means this process is applied to egress traffic, false to ingress traffic
type BitflipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter             *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	BitflipProbability *uint32 `protobuf:"varint,2,opt,name=bitflip_probability,json=bitflipProbability,proto3,oneof" json:"bitflip_probability,omitempty"`
	RecalcChecksum     *bool   `protobuf:"varint,3,opt,name=recalc_checksum,json=recalcChecksum,proto3,oneof" json:"recalc_checksum,omitempty"`
	TrafficDirection   bool    `protobuf:"varint,4,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty"`
}

func (x *BitflipRequest) Reset() {
	*x = BitflipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitflipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitflipRequest) ProtoMessage() {}

func (x *BitflipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitflipRequest.ProtoReflect.Descriptor instead.
func (*BitflipRequest) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{8}
}

func (x *BitflipRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *BitflipRequest) GetBitflipProbability() uint32 {
	if x != nil && x.BitflipProbability != nil {
		return *x.BitflipProbability
	}
	return 0
}

func (x *BitflipRequest) GetRecalcChecksum() bool {
	if x != nil && x.RecalcChecksum != nil {
		return *x.RecalcChecksum
	}
	return false
}

func (x *BitflipRequest) GetTrafficDirection() bool {
	if x != nil {
		return x.TrafficDirection
	}
	return false
}

// Message that represents a response
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkfilter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_networkfilter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_networkfilter_proto_rawDescGZIP(), []int{9}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_networkfilter_proto protoreflect.FileDescriptor

var file_networkfilter_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x36, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x70, 0x76, 0x34, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x76, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x63, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x63, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x63, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x63, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75,
	0x64, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x64, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x1a, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x98, 0x01, 0x0a, 0x09, 0x42, 0x57, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xae, 0x01, 0x0a,
	0x0b, 0x44, 0x75, 0x70, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x64,
	0x72, 0x6f, 0x70, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x74, 0x66, 0x6c, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x13, 0x62, 0x69, 0x74, 0x66, 0x6c, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x12, 0x62, 0x69, 0x74, 0x66, 0x6c, 0x69, 0x70, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x69, 0x74, 0x66, 0x6c,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x22, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0xf2, 0x06, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68, 0x61, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x42, 0x57, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6e, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x12,
	0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x66, 0x6c, 0x69, 0x70, 0x47, 0x65, 0x6e, 0x12, 0x1d, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x69,
	0x74, 0x66, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x69, 0x74, 0x66, 0x6c, 0x69, 0x70, 0x47, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x12,
	0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x69, 0x6c, 0x69, 0x70, 0x61, 0x62, 0x2f, 0x65,
	0x62, 0x70, 0x66, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_networkfilter_proto_rawDescOnce sync.Once
	file_networkfilter_proto_rawDescData = file_networkfilter_proto_rawDesc
)

func file_networkfilter_proto_rawDescGZIP() []byte {
	file_networkfilter_proto_rawDescOnce.Do(func() {
		file_networkfilter_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkfilter_proto_rawDescData)
	})
	return file_networkfilter_proto_rawDescData
}

var file_networkfilter_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_networkfilter_proto_goTypes = []interface{}{
	(*TickerRequest)(nil),              // 0: networkfilter.TickerRequest
	(*Filter)(nil),                     // 1: networkfilter.Filter
	(*EnableTrafficShaperRequest)(nil), // 2: networkfilter.EnableTrafficShaperRequest
	(*DisableRequest)(nil),             // 3: networkfilter.DisableRequest
	(*DisableTcRequest)(nil),           // 4: networkfilter.DisableTcRequest
	(*BWRequest)(nil),                  // 5: networkfilter.BWRequest
	(*DuplRequest)(nil),                // 6: networkfilter.DuplRequest
	(*DelayRequest)(nil),               // 7: networkfilter.DelayRequest
	(*BitflipRequest)(nil),             // 8: networkfilter.BitflipRequest
	(*Response)(nil),                   // 9: networkfilter.Response
}
var file_networkfilter_proto_depIdxs = []int32{
	1,  // 0: networkfilter.EnableTrafficShaperRequest.filter:type_name -> networkfilter.Filter
	1,  // 1: networkfilter.BWRequest.filter:type_name -> networkfilter.Filter
	1,  // 2: networkfilter.DuplRequest.filter:type_name -> networkfilter.Filter
	1,  // 3: networkfilter.DelayRequest.filter:type_name -> networkfilter.Filter
	1,  // 4: networkfilter.BitflipRequest.filter:type_name -> networkfilter.Filter
	2,  // 5: networkfilter.NetworkFilter.EnableNetworkFilter:input_type -> networkfilter.EnableTrafficShaperRequest
	3,  // 6: networkfilter.NetworkFilter.DisableNetworkFilter:input_type -> networkfilter.DisableRequest
	0,  // 7: networkfilter.NetworkFilter.ControlTicker:input_type -> networkfilter.TickerRequest
	5,  // 8: networkfilter.NetworkFilter.EnableBandwidthManager:input_type -> networkfilter.BWRequest
	4,  // 9: networkfilter.NetworkFilter.DisableBandwidthManager:input_type -> networkfilter.DisableTcRequest
	6,  // 10: networkfilter.NetworkFilter.EnableDuplicationGen:input_type -> networkfilter.DuplRequest
	4,  // 11: networkfilter.NetworkFilter.DisableDuplicationGen:input_type -> networkfilter.DisableTcRequest
	8,  // 12: networkfilter.NetworkFilter.EnableBitflipGen:input_type -> networkfilter.BitflipRequest
	4,  // 13: networkfilter.NetworkFilter.DisableBitflipGen:input_type -> networkfilter.DisableTcRequest
	7,  // 14: networkfilter.NetworkFilter.EnableDelayGen:input_type -> networkfilter.DelayRequest
	3,  // 15: networkfilter.NetworkFilter.DisableDelayGen:input_type -> networkfilter.DisableRequest
	9,  // 16: networkfilter.NetworkFilter.EnableNetworkFilter:output_type -> networkfilter.Response
	9,  // 17: networkfilter.NetworkFilter.DisableNetworkFilter:output_type -> networkfilter.Response
	9,  // 18: networkfilter.NetworkFilter.ControlTicker:output_type -> networkfilter.Response
	9,  // 19: networkfilter.NetworkFilter.EnableBandwidthManager:output_type -> networkfilter.Response
	9,  // 20: networkfilter.NetworkFilter.DisableBandwidthManager:output_type -> networkfilter.Response
	9,  // 21: networkfilter.NetworkFilter.EnableDuplicationGen:output_type -> networkfilter.Response
	9,  // 22: networkfilter.NetworkFilter.DisableDuplicationGen:output_type -> networkfilter.Response
	9,  // 23: networkfilter.NetworkFilter.EnableBitflipGen:output_type -> networkfilter.Response
	9,  // 24: networkfilter.NetworkFilter.DisableBitflipGen:output_type -> networkfilter.Response
	9,  // 25: networkfilter.NetworkFilter.EnableDelayGen:output_type -> networkfilter.Response
	9,  // 26: networkfilter.NetworkFilter.DisableDelayGen:output_type -> networkfilter.Response
	16, // [16:27] is the sub-list for method output_type
	5,  // [5:16] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_networkfilter_proto_init() }
func file_networkfilter_proto_init() {
	if File_networkfilter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_networkfilter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableTrafficShaperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableTcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BWRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitflipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkfilter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_networkfilter_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_networkfilter_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_networkfilter_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_networkfilter_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_networkfilter_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkfilter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_networkfilter_proto_goTypes,
		DependencyIndexes: file_networkfilter_proto_depIdxs,
		MessageInfos:      file_networkfilter_proto_msgTypes,
	}.Build()
	File_networkfilter_proto = out.File
	file_networkfilter_proto_rawDesc = nil
	file_networkfilter_proto_goTypes = nil
	file_networkfilter_proto_depIdxs = nil
}
