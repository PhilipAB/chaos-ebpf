// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: networkfilter.proto

package networkfilter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkFilter_EnableNetworkFilter_FullMethodName     = "/networkfilter.NetworkFilter/EnableNetworkFilter"
	NetworkFilter_DisableNetworkFilter_FullMethodName    = "/networkfilter.NetworkFilter/DisableNetworkFilter"
	NetworkFilter_ControlTicker_FullMethodName           = "/networkfilter.NetworkFilter/ControlTicker"
	NetworkFilter_EnableBandwidthManager_FullMethodName  = "/networkfilter.NetworkFilter/EnableBandwidthManager"
	NetworkFilter_DisableBandwidthManager_FullMethodName = "/networkfilter.NetworkFilter/DisableBandwidthManager"
	NetworkFilter_EnableDuplicationGen_FullMethodName    = "/networkfilter.NetworkFilter/EnableDuplicationGen"
	NetworkFilter_DisableDuplicationGen_FullMethodName   = "/networkfilter.NetworkFilter/DisableDuplicationGen"
	NetworkFilter_EnableBitflipGen_FullMethodName        = "/networkfilter.NetworkFilter/EnableBitflipGen"
	NetworkFilter_DisableBitflipGen_FullMethodName       = "/networkfilter.NetworkFilter/DisableBitflipGen"
	NetworkFilter_EnableDelayGen_FullMethodName          = "/networkfilter.NetworkFilter/EnableDelayGen"
	NetworkFilter_DisableDelayGen_FullMethodName         = "/networkfilter.NetworkFilter/DisableDelayGen"
)

// NetworkFilterClient is the client API for NetworkFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkFilterClient interface {
	EnableNetworkFilter(ctx context.Context, in *EnableTrafficShaperRequest, opts ...grpc.CallOption) (*Response, error)
	DisableNetworkFilter(ctx context.Context, in *DisableRequest, opts ...grpc.CallOption) (*Response, error)
	ControlTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*Response, error)
	EnableBandwidthManager(ctx context.Context, in *BWRequest, opts ...grpc.CallOption) (*Response, error)
	DisableBandwidthManager(ctx context.Context, in *DisableTcRequest, opts ...grpc.CallOption) (*Response, error)
	EnableDuplicationGen(ctx context.Context, in *DuplRequest, opts ...grpc.CallOption) (*Response, error)
	DisableDuplicationGen(ctx context.Context, in *DisableTcRequest, opts ...grpc.CallOption) (*Response, error)
	EnableBitflipGen(ctx context.Context, in *BitflipRequest, opts ...grpc.CallOption) (*Response, error)
	DisableBitflipGen(ctx context.Context, in *DisableTcRequest, opts ...grpc.CallOption) (*Response, error)
	EnableDelayGen(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*Response, error)
	DisableDelayGen(ctx context.Context, in *DisableRequest, opts ...grpc.CallOption) (*Response, error)
}

type networkFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkFilterClient(cc grpc.ClientConnInterface) NetworkFilterClient {
	return &networkFilterClient{cc}
}

func (c *networkFilterClient) EnableNetworkFilter(ctx context.Context, in *EnableTrafficShaperRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_EnableNetworkFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) DisableNetworkFilter(ctx context.Context, in *DisableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_DisableNetworkFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) ControlTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_ControlTicker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) EnableBandwidthManager(ctx context.Context, in *BWRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_EnableBandwidthManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) DisableBandwidthManager(ctx context.Context, in *DisableTcRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_DisableBandwidthManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) EnableDuplicationGen(ctx context.Context, in *DuplRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_EnableDuplicationGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) DisableDuplicationGen(ctx context.Context, in *DisableTcRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_DisableDuplicationGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) EnableBitflipGen(ctx context.Context, in *BitflipRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_EnableBitflipGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) DisableBitflipGen(ctx context.Context, in *DisableTcRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_DisableBitflipGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) EnableDelayGen(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_EnableDelayGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFilterClient) DisableDelayGen(ctx context.Context, in *DisableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkFilter_DisableDelayGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkFilterServer is the server API for NetworkFilter service.
// All implementations must embed UnimplementedNetworkFilterServer
// for forward compatibility
type NetworkFilterServer interface {
	EnableNetworkFilter(context.Context, *EnableTrafficShaperRequest) (*Response, error)
	DisableNetworkFilter(context.Context, *DisableRequest) (*Response, error)
	ControlTicker(context.Context, *TickerRequest) (*Response, error)
	EnableBandwidthManager(context.Context, *BWRequest) (*Response, error)
	DisableBandwidthManager(context.Context, *DisableTcRequest) (*Response, error)
	EnableDuplicationGen(context.Context, *DuplRequest) (*Response, error)
	DisableDuplicationGen(context.Context, *DisableTcRequest) (*Response, error)
	EnableBitflipGen(context.Context, *BitflipRequest) (*Response, error)
	DisableBitflipGen(context.Context, *DisableTcRequest) (*Response, error)
	EnableDelayGen(context.Context, *DelayRequest) (*Response, error)
	DisableDelayGen(context.Context, *DisableRequest) (*Response, error)
	mustEmbedUnimplementedNetworkFilterServer()
}

// UnimplementedNetworkFilterServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkFilterServer struct {
}

func (UnimplementedNetworkFilterServer) EnableNetworkFilter(context.Context, *EnableTrafficShaperRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableNetworkFilter not implemented")
}
func (UnimplementedNetworkFilterServer) DisableNetworkFilter(context.Context, *DisableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNetworkFilter not implemented")
}
func (UnimplementedNetworkFilterServer) ControlTicker(context.Context, *TickerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlTicker not implemented")
}
func (UnimplementedNetworkFilterServer) EnableBandwidthManager(context.Context, *BWRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBandwidthManager not implemented")
}
func (UnimplementedNetworkFilterServer) DisableBandwidthManager(context.Context, *DisableTcRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBandwidthManager not implemented")
}
func (UnimplementedNetworkFilterServer) EnableDuplicationGen(context.Context, *DuplRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDuplicationGen not implemented")
}
func (UnimplementedNetworkFilterServer) DisableDuplicationGen(context.Context, *DisableTcRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDuplicationGen not implemented")
}
func (UnimplementedNetworkFilterServer) EnableBitflipGen(context.Context, *BitflipRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBitflipGen not implemented")
}
func (UnimplementedNetworkFilterServer) DisableBitflipGen(context.Context, *DisableTcRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBitflipGen not implemented")
}
func (UnimplementedNetworkFilterServer) EnableDelayGen(context.Context, *DelayRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDelayGen not implemented")
}
func (UnimplementedNetworkFilterServer) DisableDelayGen(context.Context, *DisableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDelayGen not implemented")
}
func (UnimplementedNetworkFilterServer) mustEmbedUnimplementedNetworkFilterServer() {}

// UnsafeNetworkFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkFilterServer will
// result in compilation errors.
type UnsafeNetworkFilterServer interface {
	mustEmbedUnimplementedNetworkFilterServer()
}

func RegisterNetworkFilterServer(s grpc.ServiceRegistrar, srv NetworkFilterServer) {
	s.RegisterService(&NetworkFilter_ServiceDesc, srv)
}

func _NetworkFilter_EnableNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTrafficShaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).EnableNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_EnableNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).EnableNetworkFilter(ctx, req.(*EnableTrafficShaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_DisableNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).DisableNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_DisableNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).DisableNetworkFilter(ctx, req.(*DisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_ControlTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).ControlTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_ControlTicker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).ControlTicker(ctx, req.(*TickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_EnableBandwidthManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).EnableBandwidthManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_EnableBandwidthManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).EnableBandwidthManager(ctx, req.(*BWRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_DisableBandwidthManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).DisableBandwidthManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_DisableBandwidthManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).DisableBandwidthManager(ctx, req.(*DisableTcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_EnableDuplicationGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).EnableDuplicationGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_EnableDuplicationGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).EnableDuplicationGen(ctx, req.(*DuplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_DisableDuplicationGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).DisableDuplicationGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_DisableDuplicationGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).DisableDuplicationGen(ctx, req.(*DisableTcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_EnableBitflipGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BitflipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).EnableBitflipGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_EnableBitflipGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).EnableBitflipGen(ctx, req.(*BitflipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_DisableBitflipGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).DisableBitflipGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_DisableBitflipGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).DisableBitflipGen(ctx, req.(*DisableTcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_EnableDelayGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).EnableDelayGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_EnableDelayGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).EnableDelayGen(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFilter_DisableDelayGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFilterServer).DisableDelayGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFilter_DisableDelayGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFilterServer).DisableDelayGen(ctx, req.(*DisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkFilter_ServiceDesc is the grpc.ServiceDesc for NetworkFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkfilter.NetworkFilter",
	HandlerType: (*NetworkFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableNetworkFilter",
			Handler:    _NetworkFilter_EnableNetworkFilter_Handler,
		},
		{
			MethodName: "DisableNetworkFilter",
			Handler:    _NetworkFilter_DisableNetworkFilter_Handler,
		},
		{
			MethodName: "ControlTicker",
			Handler:    _NetworkFilter_ControlTicker_Handler,
		},
		{
			MethodName: "EnableBandwidthManager",
			Handler:    _NetworkFilter_EnableBandwidthManager_Handler,
		},
		{
			MethodName: "DisableBandwidthManager",
			Handler:    _NetworkFilter_DisableBandwidthManager_Handler,
		},
		{
			MethodName: "EnableDuplicationGen",
			Handler:    _NetworkFilter_EnableDuplicationGen_Handler,
		},
		{
			MethodName: "DisableDuplicationGen",
			Handler:    _NetworkFilter_DisableDuplicationGen_Handler,
		},
		{
			MethodName: "EnableBitflipGen",
			Handler:    _NetworkFilter_EnableBitflipGen_Handler,
		},
		{
			MethodName: "DisableBitflipGen",
			Handler:    _NetworkFilter_DisableBitflipGen_Handler,
		},
		{
			MethodName: "EnableDelayGen",
			Handler:    _NetworkFilter_EnableDelayGen_Handler,
		},
		{
			MethodName: "DisableDelayGen",
			Handler:    _NetworkFilter_DisableDelayGen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkfilter.proto",
}
